'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.componentTheme = undefined;

var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Copyright 2017 CA
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                   * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   *    http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                   * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                   * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                   * limitations under the License.
                                                                                                                                                                                                                                                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('../styles');

var _themes = require('../themes');

var _Popover = require('../Popover/Popover');

var _Popover2 = _interopRequireDefault(_Popover);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DELAY_OPEN = 250; // ms

var componentTheme = exports.componentTheme = function componentTheme(baseTheme) {
  return _extends({}, (0, _themes.mapComponentThemes)({
    name: 'Popover',
    theme: (0, _Popover.componentTheme)(baseTheme)
  }, {
    name: 'Tooltip',
    theme: {
      TooltipArrow_backgroundColor: baseTheme.color_gray_90,
      TooltipArrow_borderColor: baseTheme.color_gray_90,

      TooltipContent_backgroundColor: baseTheme.color_gray_90,
      TooltipContent_borderColor: baseTheme.color_gray_90,
      TooltipContent_color: baseTheme.color_white,
      TooltipContent_maxWidth: '18em',

      TooltipContentBlock_marginVertical: '0',
      TooltipContentBlock_paddingHorizontal: baseTheme.space_inset_md,

      TooltipTriggerText_borderStyle: 'dashed',
      TooltipTriggerText_borderColor: baseTheme.color_text,
      TooltipTriggerText_borderWidth: '1px'
    }
  }, baseTheme));
};

var Root = (0, _themes.createThemedComponent)(_Popover2.default, function (_ref) {
  var baseTheme = _ref.theme;

  return _extends({}, (0, _themes.mapComponentThemes)({
    name: 'Tooltip',
    theme: componentTheme(baseTheme)
  }, {
    name: 'Popover',
    theme: {}
  }, baseTheme));
});

var TriggerText = (0, _styles.createStyledComponent)('span', function (_ref2) {
  var baseTheme = _ref2.theme;

  var theme = componentTheme(baseTheme);

  return {
    borderBottomStyle: theme.TooltipTriggerText_borderStyle,
    borderBottomColor: theme.TooltipTriggerText_borderColor,
    borderBottomWidth: theme.TooltipTriggerText_borderWidth
  };
});

/**
 * Tooltips display supporting information to disambiguate user controls and text.
 */

var Tooltip = function (_Component) {
  _inherits(Tooltip, _Component);

  function Tooltip() {
    var _ref3;

    var _temp, _this, _ret;

    _classCallCheck(this, Tooltip);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref3 = Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call.apply(_ref3, [this].concat(args))), _this), _this.state = {
      isOpen: Boolean(_this.props.defaultIsOpen)
    }, _this.getContentProps = function (props) {
      return _extends({}, props, {
        'aria-live': 'polite',
        role: 'tooltip',
        tabIndex: undefined
      });
    }, _this.getTriggerProps = function (props) {
      return _extends({}, props, {
        'aria-expanded': undefined,
        onBlur: _this.close,
        onFocus: _this.handleDelayedOpen,
        onMouseEnter: _this.handleDelayedOpen,
        onMouseLeave: _this.close,
        tabIndex: 0
      });
    }, _this.handleDelayedOpen = function (event) {
      _this.clearOpenTimer();

      var _ref4 = _this.isControlled() ? _this.props : _this.state,
          isOpen = _ref4.isOpen;

      if (!isOpen) {
        _this.openTimer = global.setTimeout(function () {
          _this.open(event);
        }, DELAY_OPEN);
      }
    }, _this.clearOpenTimer = function () {
      global.clearTimeout(_this.openTimer);
      _this.openTimer = null;
    }, _this.open = function (event) {
      if (_this.isControlled()) {
        _this.openActions(event);
      } else {
        _this.setState({ isOpen: true }, function () {
          _this.openActions(event);
        });
      }
    }, _this.openActions = function (event) {
      _this.props.onOpen && _this.props.onOpen(event);
    }, _this.close = function (event) {
      _this.clearOpenTimer();
      if (_this.isControlled()) {
        _this.closeActions(event);
      } else {
        _this.setState({ isOpen: false }, function () {
          _this.closeActions(event);
        });
      }
    }, _this.closeActions = function (event) {
      _this.props.onClose && _this.props.onClose(event);
    }, _this.isControlled = function () {
      return _this.props.isOpen !== undefined;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Tooltip, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.clearOpenTimer();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          disabled = _props.disabled,
          ignoreSubtitle = _props.subtitle,
          ignoreTitle = _props.title,
          restProps = _objectWithoutProperties(_props, ['children', 'disabled', 'subtitle', 'title']);

      if (disabled) {
        return children;
      }

      var _ref5 = this.isControlled() ? this.props : this.state,
          isOpen = _ref5.isOpen;

      var popoverProps = _extends({}, restProps, {
        focusTriggerOnClose: false,
        getContentProps: this.getContentProps,
        getTriggerProps: this.getTriggerProps,
        isOpen: isOpen,
        onClose: this.close,
        onOpen: this.open
      });

      var trigger = typeof children === 'string' ? _jsx(TriggerText, {}, void 0, children) : children;

      var child = _react.Children.only(trigger);

      return _react2.default.createElement(
        Root,
        popoverProps,
        child
      );
    }
  }]);

  return Tooltip;
}(_react.Component);

Tooltip.propTypes = {
  /** Trigger for the Tooltip */
  children: typeof React$Node === 'function' ? require('prop-types').instanceOf(React$Node).isRequired : require('prop-types').any.isRequired,

  /** Content of the Tooltip */
  content: require('prop-types').string.isRequired,

  /**
   * For use with uncontrolled components, in which the Tooltip is immediately
   * open upon initialization */
  defaultIsOpen: require('prop-types').bool,

  /** Disables the Tooltip */
  disabled: require('prop-types').bool,

  /** For use with controlled components, in which the app manages Tooltip state */
  isOpen: require('prop-types').bool,

  /**
   * Plugins that are used to alter behavior. See
   * [PopperJS docs](https://popper.js.org/popper-documentation.html#modifiers)
   * for options.
   */
  /** Called when Tooltip is closed */
  onClose: require('prop-types').func,

  /** Called when Tooltip is opened */
  onOpen: require('prop-types').func,

  /** Placement of the Tooltip */
  placement: require('prop-types').oneOf(['auto', 'auto-end', 'auto-start', 'bottom', 'bottom-end', 'bottom-start', 'left', 'left-end', 'left-start', 'right', 'right-end', 'right-start', 'top', 'top-end', 'top-start']),

  /** @Private Tooltips should not have subtitles and will be removed */
  subtitle: require('prop-types').any,

  /** @Private Tooltips should not have titles and will be removed */
  title: require('prop-types').any,

  /**
   * Use a Portal to render the Popover to the body rather than as a sibling
   * to the trigger.
   */
  usePortal: require('prop-types').bool
};
exports.default = Tooltip;