'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.componentTheme = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Copyright 2017 CA
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                   * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   *    http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                   * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                   * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                   * limitations under the License.
                                                                                                                                                                                                                                                                   */

exports.default = TextInput;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('../styles');

var _IconDanger = require('../Icon/IconDanger');

var _IconDanger2 = _interopRequireDefault(_IconDanger);

var _IconSuccess = require('../Icon/IconSuccess');

var _IconSuccess2 = _interopRequireDefault(_IconSuccess);

var _IconWarning = require('../Icon/IconWarning');

var _IconWarning2 = _interopRequireDefault(_IconWarning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var componentTheme = exports.componentTheme = function componentTheme(baseTheme) {
  return _extends({
    TextInput_backgroundColor: baseTheme.backgroundColor_input,
    TextInput_borderColor: baseTheme.borderColor,
    TextInput_borderColor_active: baseTheme.borderColor,
    TextInput_borderColor_focus: baseTheme.borderColor,
    TextInput_borderColor_hover: baseTheme.borderColor_hover,
    TextInput_borderRadius: baseTheme.borderRadius_1,
    TextInput_borderWidth: '1px',
    TextInput_boxShadow_active: '0 0 0 1px ' + baseTheme.color_white + ', 0 0 0 2px ' + baseTheme.borderColor_active,
    TextInput_boxShadow_focus: '0 0 0 1px ' + baseTheme.color_white + ', 0 0 0 2px ' + baseTheme.borderColor_focus,
    TextInput_color_text: baseTheme.color_gray_80,
    TextInput_color_placeholder: baseTheme.color_gray_60,
    TextInput_fontSize: baseTheme.fontSize_ui,
    TextInput_fontSize_small: (0, _styles.pxToEm)(12),
    TextInput_height_small: baseTheme.size_small,
    TextInput_height_medium: baseTheme.size_medium,
    TextInput_height_large: baseTheme.size_large,
    TextInput_height_jumbo: baseTheme.size_jumbo,
    TextInput_paddingHorizontal: baseTheme.space_inset_md,

    TextInputIcon_fill: baseTheme.color_gray_40,
    TextInputIcon_marginHorizontal: baseTheme.space_inline_sm

  }, baseTheme);
};

var styles = {
  input: function input(_ref) {
    var disabled = _ref.disabled,
        iconEnd = _ref.iconEnd,
        iconStart = _ref.iconStart,
        prefix = _ref.prefix,
        readOnly = _ref.readOnly,
        size = _ref.size,
        suffix = _ref.suffix,
        baseTheme = _ref.theme,
        variant = _ref.variant;

    var theme = componentTheme(baseTheme);
    if (variant) {
      // prettier-ignore
      theme = _extends({}, theme, {
        TextInput_borderColor_hover: theme['borderColor_' + variant + '_hover'],
        TextInput_boxShadow_active: '0 0 0 1px ' + theme.color_white + ', 0 0 0 2px ' + theme['borderColor_' + variant],
        TextInput_boxShadow_focus: '0 0 0 1px ' + theme.color_white + ', 0 0 0 2px ' + theme['borderColor_' + variant]
      });
    }

    var rtl = theme.direction === 'rtl';
    var fontSize = size === 'small' ? theme.TextInput_fontSize_small : theme.TextInput_fontSize;
    var paddingWithoutIcon = (0, _styles.getNormalizedValue)(theme.TextInput_paddingHorizontal, fontSize);

    var placeholderStyles = {
      color: theme.TextInput_color_placeholder,
      fontStyle: 'italic'
    };

    return {
      backgroundColor: 'transparent',
      border: 0,
      boxShadow: 'none',
      color: disabled ? theme.color_text_disabled : theme.TextInput_color_text,
      flex: '1 1 auto',
      fontFamily: 'inherit',
      fontSize: fontSize,
      height: (0, _styles.getNormalizedValue)(theme['TextInput_height_' + size], fontSize),
      minWidth: 0,
      outline: 0,
      paddingLeft: (iconStart || prefix) && !rtl || (iconEnd || variant || suffix) && rtl ? 0 : paddingWithoutIcon,
      paddingRight: (iconEnd || variant || suffix) && !rtl || (iconStart || prefix) && rtl ? 0 : paddingWithoutIcon,
      width: '100%',

      '&::placeholder': placeholderStyles,
      '&::-ms-input-placeholder': placeholderStyles, // Edge
      '&:-ms-input-placeholder': placeholderStyles, // IE 11

      '&::-ms-clear': {
        display: 'none'
      },

      '&:hover,&[data-simulate-hover]': {
        '& ~ div': {
          borderColor: !disabled ? theme.TextInput_borderColor_hover : null
        }
      },

      '&:focus,&[data-simulate-focus]': {
        '& ~ div': {
          borderColor: theme.TextInput_borderColor_focus,
          boxShadow: theme.TextInput_boxShadow_focus
        }
      },

      '&:active,&[data-simulate-active]': {
        '& ~ div': {
          borderColor: theme.TextInput_borderColor_active,
          boxShadow: disabled ? 'none' : theme.TextInput_boxShadow_active
        }
      },

      '& ~ div': {
        backgroundColor: disabled || readOnly ? theme.backgroundColor_disabled : theme.TextInput_backgroundColor,
        borderColor: variant && !disabled && !readOnly ? theme['borderColor_' + variant] : theme.TextInput_borderColor,
        borderRadius: theme.TextInput_borderRadius,
        borderStyle: 'solid',
        borderWidth: theme.TextInput_borderWidth,
        bottom: 0,
        left: 0,
        position: 'absolute',
        right: 0,
        top: 0,
        zIndex: -1
      }
    };
  },
  prefix: function prefix(_ref2) {
    var iconStart = _ref2.iconStart,
        size = _ref2.size,
        baseTheme = _ref2.theme;

    var theme = componentTheme(baseTheme);
    var rtl = theme.direction === 'rtl';

    var fontSize = size === 'small' ? theme.TextInput_fontSize_small : theme.TextInput_fontSize;
    var marginWithIcon = (0, _styles.getNormalizedValue)(theme.TextInput_paddingHorizontal, fontSize);
    var marginWithoutIcon = (0, _styles.getNormalizedValue)(parseFloat(theme.TextInputIcon_marginHorizontal) / 2 + 'em', fontSize);

    return _extends({
      flex: '0 0 auto',
      fontSize: fontSize,
      marginLeft: rtl ? marginWithoutIcon : iconStart ? 0 : marginWithIcon,
      marginRight: rtl ? iconStart ? 0 : marginWithIcon : marginWithoutIcon,
      whiteSpace: 'nowrap'
    }, {
      display: 'inline-block',
      maxWidth: '8em',
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap',
      wordWrap: 'normal'
    });
  },
  root: function root(_ref3) {
    var baseTheme = _ref3.theme,
        variant = _ref3.variant;

    var theme = componentTheme(baseTheme);

    return {
      alignItems: 'center',
      cursor: 'text',
      display: 'flex',
      position: 'relative',
      width: '100%',

      '& [role="img"]': {
        display: 'block',
        fill: theme.TextInputIcon_fill,
        flex: '0 0 auto',
        margin: '0 ' + theme.TextInputIcon_marginHorizontal,

        '&:last-of-type': {
          fill: variant ? theme['color_text_' + variant] : theme.TextInputIcon_fill
        }
      }
    };
  },
  suffix: function suffix(_ref4) {
    var iconEnd = _ref4.iconEnd,
        size = _ref4.size,
        baseTheme = _ref4.theme,
        variant = _ref4.variant;

    var theme = componentTheme(baseTheme);
    var rtl = theme.direction === 'rtl';

    var fontSize = size === 'small' ? theme.TextInput_fontSize_small : theme.TextInput_fontSize;
    var marginWithIcon = (0, _styles.getNormalizedValue)(theme.TextInput_paddingHorizontal, fontSize);
    var marginWithoutIcon = (0, _styles.getNormalizedValue)(parseFloat(theme.TextInputIcon_marginHorizontal) / 2 + 'em', fontSize);

    return _extends({
      flex: '0 0 auto',
      fontSize: fontSize,
      marginLeft: rtl ? iconEnd || variant ? 0 : marginWithIcon : marginWithoutIcon,
      marginRight: rtl ? marginWithoutIcon : iconEnd || variant ? 0 : marginWithIcon,
      whiteSpace: 'nowrap'
    }, {
      display: 'inline-block',
      maxWidth: '8em',
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap',
      wordWrap: 'normal'
    });
  }
};

var Root = (0, _styles.createStyledComponent)('div', styles.root, {
  displayName: 'TextInput',
  includeStyleReset: true
});
var Input = (0, _styles.createStyledComponent)('input', styles.input, {
  rootEl: 'input'
});
var Prefix = (0, _styles.createStyledComponent)('span', styles.prefix);
var Suffix = (0, _styles.createStyledComponent)('span', styles.suffix);

var variantIcons = {
  danger: _jsx(_IconDanger2.default, {}),
  success: _jsx(_IconSuccess2.default, {}),
  warning: _jsx(_IconWarning2.default, {})
};

function getIcons(_ref5) {
  var disabled = _ref5.disabled,
      iconStart = _ref5.iconStart,
      iconEnd = _ref5.iconEnd,
      readOnly = _ref5.readOnly,
      size = _ref5.size,
      variant = _ref5.variant,
      variantIcons = _ref5.variantIcons;

  if (disabled || readOnly) {
    return [];
  }

  var iconSize = size === 'small' ? 'medium' : (0, _styles.pxToEm)(24);
  var startIcon = iconStart && (0, _react.cloneElement)(iconStart, {
    size: iconSize,
    key: 'iconStart'
  });

  var endIconSource = variant ? variantIcons[variant] : iconEnd ? iconEnd : null;

  var endIcon = endIconSource && (0, _react.cloneElement)(endIconSource, {
    size: iconSize,
    key: 'iconEnd'
  });

  return [startIcon, endIcon];
}

/**
 * TextInput allows your app to accept a text value from the user. It supports
 * any of the text-based input types, such as `text`, `number` or `email`.
 */

var _ref7 = _jsx('div', {});

function TextInput(_ref6) {
  var className = _ref6.className,
      disabled = _ref6.disabled,
      iconEnd = _ref6.iconEnd,
      iconStart = _ref6.iconStart,
      inputRef = _ref6.inputRef,
      otherRootProps = _ref6.rootProps,
      invalid = _ref6.invalid,
      prefix = _ref6.prefix,
      readOnly = _ref6.readOnly,
      required = _ref6.required,
      _ref6$size = _ref6.size,
      size = _ref6$size === undefined ? 'large' : _ref6$size,
      suffix = _ref6.suffix,
      _ref6$type = _ref6.type,
      type = _ref6$type === undefined ? 'text' : _ref6$type,
      variant = _ref6.variant,
      restProps = _objectWithoutProperties(_ref6, ['className', 'disabled', 'iconEnd', 'iconStart', 'inputRef', 'rootProps', 'invalid', 'prefix', 'readOnly', 'required', 'size', 'suffix', 'type', 'variant']);

  var rootProps = _extends({
    className: className,
    variant: variant
  }, otherRootProps);

  var inputProps = _extends({
    'aria-invalid': invalid,
    'aria-required': required,
    disabled: disabled,
    iconEnd: iconEnd,
    iconStart: iconStart,
    innerRef: function innerRef(ref) {
      if (inputRef) {
        inputRef(ref);
      }
    },
    prefix: prefix,
    readOnly: readOnly,
    required: required,
    size: size,
    suffix: suffix,
    type: type,
    variant: variant
  }, restProps);

  var prefixAndSuffixProps = {
    iconEnd: iconEnd,
    iconStart: iconStart,
    size: size,
    variant: variant
  };

  var _getIcons = getIcons({
    disabled: disabled,
    iconStart: iconStart,
    iconEnd: iconEnd,
    readOnly: readOnly,
    size: size,
    variant: variant,
    variantIcons: variantIcons
  }),
      _getIcons2 = _slicedToArray(_getIcons, 2),
      startIcon = _getIcons2[0],
      endIcon = _getIcons2[1];

  return _react2.default.createElement(
    Root,
    rootProps,
    startIcon,
    prefix && _react2.default.createElement(
      Prefix,
      prefixAndSuffixProps,
      prefix
    ),
    _react2.default.createElement(Input, inputProps),
    suffix && _react2.default.createElement(
      Suffix,
      prefixAndSuffixProps,
      suffix
    ),
    endIcon,
    _ref7
  );
}