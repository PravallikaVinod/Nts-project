var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Copyright 2017 CA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React, { Children, cloneElement, createElement } from 'react';
import { createStyledComponent } from '../styles';

export var componentTheme = function componentTheme(baseTheme) {
  return _extends({
    ChoiceGroupControl_marginHorizontal_inline: baseTheme.space_inline_xl,
    ChoiceGroupControl_marginVertical_stacked: baseTheme.space_stack_md,
    ChoiceGroupControl_marginVertical_stackedJumbo: baseTheme.space_stack_lg

  }, baseTheme);
};

var styles = {
  root: function root(_ref) {
    var inline = _ref.inline,
        size = _ref.size,
        baseTheme = _ref.theme;

    var theme = componentTheme(baseTheme);

    return {
      display: 'flex',
      flexDirection: inline ? 'row' : 'column',

      '& > *:not(:last-child)': {
        marginBottom: inline ? 0 : size === 'jumbo' ? theme.ChoiceGroupControl_marginVertical_stackedJumbo : theme.ChoiceGroupControl_marginVertical_stacked,
        marginRight: inline ? theme.ChoiceGroupControl_marginHorizontal_inline : undefined
      }
    };
  }
};

var Root = createStyledComponent('div', styles.root, {
  displayName: 'ChoiceGroup',
  includeStyleReset: true
});

var isChecked = function isChecked(checked, value) {
  return Array.isArray(checked) ? checked.indexOf(value) !== -1 : checked === value;
};

/**
 * ChoiceGroup allows users to construct a group
 * of [Radios](../radio) or [Checkboxes](../checkbox) and
 * provides a simpler API than working with Radio or Checkbox directly.
 */
export default function ChoiceGroup(_ref2) {
  var checked = _ref2.checked,
      children = _ref2.children,
      data = _ref2.data,
      defaultChecked = _ref2.defaultChecked,
      inline = _ref2.inline,
      input = _ref2.input,
      invalid = _ref2.invalid,
      name = _ref2.name,
      onChange = _ref2.onChange,
      required = _ref2.required,
      _ref2$role = _ref2.role,
      role = _ref2$role === undefined ? 'group' : _ref2$role,
      otherRootProps = _ref2.rootProps,
      _ref2$size = _ref2.size,
      size = _ref2$size === undefined ? 'large' : _ref2$size,
      type = _ref2.type,
      restProps = _objectWithoutProperties(_ref2, ['checked', 'children', 'data', 'defaultChecked', 'inline', 'input', 'invalid', 'name', 'onChange', 'required', 'role', 'rootProps', 'size', 'type']);

  var rootProps = _extends({
    inline: inline,
    role: role,
    size: size
  }, otherRootProps);

  var inputProps = function inputProps(value, index) {
    var inputData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    return _extends({
      checked: checked !== undefined ? isChecked(checked, value) : undefined,
      defaultChecked: defaultChecked !== undefined ? isChecked(defaultChecked, value) : undefined,
      invalid: type === 'checkbox' ? undefined : invalid,
      key: index,
      name: name,
      onChange: onChange,
      required: type === 'checkbox' ? undefined : required,
      size: size
    }, restProps, inputData);
  };

  var inputs = null;
  if (data && input) {
    inputs = data.map(function (inputData, index) {
      return createElement(
      // $FlowFixMe
      input, inputProps(inputData.value, index, inputData));
    });
  } else if (children) {
    inputs = Children.map(children, function (child, index) {
      return cloneElement(child, inputProps(child.props.value, index));
    });
  }

  return React.createElement(
    Root,
    rootProps,
    inputs
  );
}