var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Copyright 2017 CA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React from 'react';

import { createStyledComponent, pxToEm } from '../styles';

export var componentTheme = function componentTheme(baseTheme) {
  var colors = {
    background: baseTheme.color_white,
    regular: baseTheme.borderColor,
    checked: baseTheme.color_theme_60,
    focus: baseTheme.color_theme_60,
    hover: baseTheme.color_theme_70
  };

  return _extends({
    ChoiceControl_backgroundColor: colors.background,
    ChoiceControl_backgroundColor_checked: colors.checked,
    ChoiceControl_backgroundColor_checkedHover: colors.hover,
    ChoiceControl_borderColor: colors.regular,
    ChoiceControl_borderColor_hover: colors.hover,
    ChoiceControl_borderColor_checked: colors.checked,
    ChoiceControl_borderColor_checkedHover: colors.hover,
    ChoiceControl_borderRadius: baseTheme.borderRadius_1,
    ChoiceControl_boxShadow_focus: '0 0 0 1px ' + colors.background + ', 0 0 0 2px ' + colors.focus,
    ChoiceControl_marginHorizontal: baseTheme.space_inline_md,
    ChoiceControl_size: pxToEm(16),
    ChoiceControl_size_jumbo: pxToEm(24),

    ChoiceText_color_text: baseTheme.color_text_80,
    ChoiceText_fontSize: baseTheme.fontSize_ui,
    ChoiceText_fontSize_small: pxToEm(12)

  }, baseTheme);
};

var styles = {
  control: function control(_ref) {
    var disabled = _ref.disabled,
        labelPosition = _ref.labelPosition,
        size = _ref.size,
        baseTheme = _ref.theme;

    var theme = componentTheme(baseTheme);
    var rtl = theme.direction === 'rtl';
    var backgroundColor = disabled ? theme.backgroundColor_disabled : theme.ChoiceControl_backgroundColor;
    var controlDimensions = size === 'jumbo' ? theme.ChoiceControl_size_jumbo : theme.ChoiceControl_size;
    var labelPositionStart = labelPosition === 'start';

    return {
      alignItems: 'center',
      backgroundColor: backgroundColor,
      borderColor: theme.ChoiceControl_borderColor,
      borderRadius: theme.ChoiceControl_borderRadius,
      borderStyle: 'solid',
      borderWidth: '1px',
      color: backgroundColor,
      content: '""',
      display: 'flex',
      flex: 'none',
      height: controlDimensions,
      justifyContent: 'center',
      marginLeft: labelPositionStart && !rtl || !labelPositionStart && rtl ? theme.ChoiceControl_marginHorizontal : 0,
      marginRight: labelPositionStart && !rtl || !labelPositionStart && rtl ? 0 : theme.ChoiceControl_marginHorizontal,
      width: controlDimensions,

      '& svg': {
        fill: 'currentColor',
        height: 'auto',
        width: '100%'
      }
    };
  },
  input: function input(_ref2) {
    var baseTheme = _ref2.theme;

    var theme = componentTheme(baseTheme);

    return _extends({
      border: '0',
      clip: 'rect(0 0 0 0)',
      clipPath: 'inset(50%)',
      height: '1px',
      margin: '-1px',
      overflow: 'hidden',
      padding: '0',
      position: 'absolute',
      whiteSpace: 'nowrap',
      width: '1px'
    }, {

      // NOTE: These hover styles are only needed for the "states" demo.
      // Otherwise they are applied from styles.root
      '&:hover,&[data-simulate-hover]': {
        '&:not(:disabled) + span': {
          borderColor: theme.ChoiceControl_borderColor_hover
        }
      },

      '&:focus,&[data-simulate-focus]': {
        '& + span': {
          boxShadow: theme.ChoiceControl_boxShadow_focus
        }
      },

      '&:checked,[type="checkbox"]:indeterminate': {
        '& + span': {
          backgroundColor: theme.ChoiceControl_backgroundColor_checked,
          borderColor: theme.ChoiceControl_borderColor_checked
        },

        '&:hover,&[data-simulate-hover]': {
          '& + span': {
            backgroundColor: theme.ChoiceControl_backgroundColor_checkedHover,
            borderColor: theme.ChoiceControl_borderColor_checkedHover
          }
        },

        '&:disabled': {
          '& + span': {
            backgroundColor: theme.ChoiceControl_borderColor,
            borderColor: theme.ChoiceControl_borderColor,
            color: theme.ChoiceControl_backgroundColor
          }
        }
      }
    });
  },
  root: function root(_ref3) {
    var disabled = _ref3.disabled,
        justify = _ref3.justify,
        labelPosition = _ref3.labelPosition,
        baseTheme = _ref3.theme;

    var theme = componentTheme(baseTheme);
    var labelPositionStart = labelPosition === 'start';

    return {
      alignItems: 'center',
      cursor: !disabled && 'pointer',
      display: 'flex',
      position: 'relative',
      flexDirection: labelPositionStart && 'row-reverse',
      justifyContent: !justify && (labelPositionStart ? 'flex-end' : 'flex-start'),

      '&:hover': {
        '& span:first-of-type': {
          borderColor: !disabled && theme.ChoiceControl_borderColor_hover
        }
      }
    };
  },
  text: function text(_ref4) {
    var disabled = _ref4.disabled,
        justify = _ref4.justify,
        labelPosition = _ref4.labelPosition,
        size = _ref4.size,
        baseTheme = _ref4.theme;

    var theme = componentTheme(baseTheme);
    var rtl = theme.direction === 'rtl';
    var labelPositionStart = labelPosition === 'start';

    return _extends({
      color: disabled ? theme.color_text_disabled : theme.ChoiceText_color_text,
      fontSize: size === 'small' ? theme.ChoiceText_fontSize_small : theme.ChoiceText_fontSize

    }, justify ? {
      marginLeft: labelPositionStart && !rtl || !labelPositionStart && rtl ? 0 : 'auto',
      marginRight: labelPositionStart && !rtl || !labelPositionStart && rtl ? 'auto' : 0
    } : {});
  }
};

var Root = createStyledComponent('label', styles.root, {
  displayName: 'Choice',
  includeStyleReset: true
});
var Input = createStyledComponent('input', styles.input, {
  rootEl: 'input'
});
var Text = createStyledComponent('span', styles.text);
var Control = createStyledComponent('span', styles.control);

/**
 * Choice is base renderer for Checkbox and Radio.
 */
export default function Choice(_ref5) {
  var checked = _ref5.checked,
      className = _ref5.className,
      defaultChecked = _ref5.defaultChecked,
      disabled = _ref5.disabled,
      justify = _ref5.justify,
      iconChecked = _ref5.iconChecked,
      inputRef = _ref5.inputRef,
      invalid = _ref5.invalid,
      label = _ref5.label,
      _ref5$labelPosition = _ref5.labelPosition,
      labelPosition = _ref5$labelPosition === undefined ? 'end' : _ref5$labelPosition,
      required = _ref5.required,
      otherRootProps = _ref5.rootProps,
      _ref5$size = _ref5.size,
      size = _ref5$size === undefined ? 'large' : _ref5$size,
      type = _ref5.type,
      restProps = _objectWithoutProperties(_ref5, ['checked', 'className', 'defaultChecked', 'disabled', 'justify', 'iconChecked', 'inputRef', 'invalid', 'label', 'labelPosition', 'required', 'rootProps', 'size', 'type']);

  var rootProps = _extends({
    className: className,
    disabled: disabled,
    justify: justify,
    labelPosition: labelPosition
  }, otherRootProps);

  var inputProps = _extends({
    'aria-invalid': invalid,
    'aria-required': required,
    checked: checked,
    defaultChecked: defaultChecked,
    disabled: disabled,
    innerRef: function innerRef(ref) {
      if (inputRef) {
        inputRef(ref);
      }
    },
    required: required,
    size: size,
    type: type
  }, restProps);

  var controlProps = {
    disabled: disabled,
    labelPosition: labelPosition,
    size: size
  };

  var textProps = {
    disabled: disabled,
    justify: justify,
    labelPosition: labelPosition,
    size: size
  };

  return React.createElement(
    Root,
    rootProps,
    React.createElement(Input, inputProps),
    React.createElement(
      Control,
      controlProps,
      iconChecked
    ),
    React.createElement(
      Text,
      textProps,
      label
    )
  );
}