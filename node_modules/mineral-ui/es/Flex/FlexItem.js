var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Copyright 2017 CA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React from 'react';
import { createStyledComponent, getResponsiveStyles } from '../styles';
import Box from '../Box';

var mapValueToProperty = function mapValueToProperty(property, value) {
  var map = {
    alignSelf: function alignSelf(value) {
      return value === 'start' || value === 'end' ? 'flex-' + value : value;
    },
    flexBasis: function flexBasis(value) {
      return typeof value === 'number' && value < 1 ? value * 100 + '%' : value;
    },
    flexGrow: function flexGrow(value) {
      return value;
    },
    flexShrink: function flexShrink(value) {
      return value;
    }
  };

  return map[property](value);
};

var styles = {
  root: function root(_ref) {
    var alignSelf = _ref.alignSelf,
        breakpoints = _ref.breakpoints,
        grow = _ref.grow,
        shrink = _ref.shrink,
        theme = _ref.theme,
        width = _ref.width;
    return _extends({}, getResponsiveStyles({
      breakpoints: breakpoints,
      mapValueToProperty: mapValueToProperty,
      styles: {
        alignSelf: alignSelf,
        flexBasis: width || 'auto',
        flexGrow: grow,
        flexShrink: shrink
      },
      theme: theme
    }));
  }
};

var Root = createStyledComponent(Box, styles.root, {
  displayName: 'FlexItem',
  filterProps: ['inline', 'width']
});

/**
 * FlexItem is used within [Flex](../flex) to lay out other components in
 * your app.
 */
var FlexItem = function FlexItem(props) {
  return React.createElement(Root, props);
};

FlexItem.propTypes = {
  /** Align item along the cross axis [[Responsive-capable]](#responsive) */
  alignSelf: require('prop-types').oneOfType([require('prop-types').oneOf(['start']), require('prop-types').oneOf(['end']), require('prop-types').oneOf(['center']), require('prop-types').oneOf(['stretch']), require('prop-types').arrayOf(require('prop-types').oneOf(['start', 'end', 'center', 'stretch']))]),

  /**
   * Media query (min-width) breakpoints along which to apply props marked
   * "&#xfeff;[[Responsive-capable]](#responsive)&#xfeff;"
   */
  breakpoints: require('prop-types').arrayOf(require('prop-types').oneOfType([require('prop-types').number, require('prop-types').string])),

  /**
   * Grow factor along the main axis ([see example](#grow))
   * [[Responsive-capable]](#responsive)
   */
  grow: require('prop-types').oneOfType([require('prop-types').number, require('prop-types').arrayOf(require('prop-types').number)]),

  /**
   * Shrink factor along the main axis ([see example](#shrink))
   * [[Responsive-capable]](#responsive)
   */
  shrink: require('prop-types').oneOfType([require('prop-types').number, require('prop-types').arrayOf(require('prop-types').number)])
};
FlexItem.defaultProps = {
  grow: 0,
  shrink: 1
};

export default FlexItem;