var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Copyright 2017 CA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React from 'react';
import { createThemedComponent, mapComponentThemes } from '../themes';
import Choice, { componentTheme as choiceComponentTheme } from '../Choice/Choice';
import IconChecked from '../Icon/IconRadioButtonCheck';

export var componentTheme = function componentTheme(baseTheme) {
  return _extends({}, mapComponentThemes({
    name: 'Choice',
    theme: choiceComponentTheme(baseTheme)
  }, {
    name: 'Radio',
    theme: {
      RadioControl_borderRadius: '100%'
    }
  }, baseTheme));
};

var Root = createThemedComponent(Choice, function (_ref) {
  var baseTheme = _ref.theme;

  return _extends({}, mapComponentThemes({
    name: 'Radio',
    theme: componentTheme(baseTheme)
  }, {
    name: 'Choice',
    theme: {}
  }, baseTheme));
});

/**
 * Radio is an interactive control that can be turned on or off. Radios are most
 * often used in [groups](../radio-group), wherein only a single option may be
 * selected.
 */

var _ref3 = _jsx(IconChecked, {});

export default function Radio(_ref2) {
  var className = _ref2.className,
      _ref2$labelPosition = _ref2.labelPosition,
      labelPosition = _ref2$labelPosition === undefined ? 'end' : _ref2$labelPosition,
      inputRef = _ref2.inputRef,
      otherRootProps = _ref2.rootProps,
      _ref2$size = _ref2.size,
      size = _ref2$size === undefined ? 'large' : _ref2$size,
      restProps = _objectWithoutProperties(_ref2, ['className', 'labelPosition', 'inputRef', 'rootProps', 'size']);

  var rootProps = _extends({
    labelPosition: labelPosition,
    iconChecked: _ref3,
    inputRef: function (_inputRef) {
      function inputRef(_x) {
        return _inputRef.apply(this, arguments);
      }

      inputRef.toString = function () {
        return _inputRef.toString();
      };

      return inputRef;
    }(function (ref) {
      if (inputRef) {
        inputRef(ref);
      }
    }),
    rootProps: _extends({
      className: className
    }, otherRootProps),
    size: size,
    type: 'radio'
  }, restProps);

  return React.createElement(Root, rootProps);
}