var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Copyright 2017 CA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React from 'react';
import { createStyledComponent } from '../styles';
import { MenuDivider, MenuGroup, MenuItem } from './index';

var Root = createStyledComponent('div', {}, {
  displayName: 'Menu',
  includeStyleReset: true
});

/**
 * A Menu presents a list of options representing actions or navigation.
 * Composed of [MenuItems](../menu-item), Menu is usually combined with [Popover](../popover) to create a [Dropdown](../dropdown).
 *
 * Menus are great for collecting actions in one place so your users don't need to scan the entire document to find a feature.
 */
export default function Menu(_ref) {
  var children = _ref.children,
      data = _ref.data,
      getItemProps = _ref.getItemProps,
      restProps = _objectWithoutProperties(_ref, ['children', 'data', 'getItemProps']);

  var rootProps = _extends({}, restProps);

  return React.createElement(
    Root,
    rootProps,
    data ? renderFromData(data, getItemProps) : children
  );
}

function renderFromData(data, getItemProps) {
  return data.reduce(function (acc, group, groupIndex) {
    acc.groups.push(renderMenuGroup(group, groupIndex, getItemProps, acc));
    return acc;
  }, { groups: [], itemIndex: 0 }).groups;
}

function renderMenuGroup(group, groupIndex, getItemProps, acc) {
  return group.items && group.items.length ? _jsx(MenuGroup, {
    title: group.title
  }, groupIndex, group.items.map(function (item, itemIndex) {
    return renderMenuItem(item, itemIndex, getItemProps, acc);
  })) : null;
}

function renderMenuItem(item, itemIndex, getItemProps, acc) {
  if (item.divider) {
    return _jsx(MenuDivider, {}, itemIndex);
  } else {
    var index = acc.itemIndex++; // Excludes MenuDividers

    var _text = item.text,
        restItemProps = _objectWithoutProperties(item, ['text']);

    var itemProps = getItemProps ? getItemProps(_extends({}, restItemProps, {
      item: item
    }), { index: index, item: item }) : _extends({}, restItemProps, {
      item: item
    });

    return React.createElement(
      MenuItem,
      _extends({ key: itemIndex }, itemProps),
      _text
    );
  }
}