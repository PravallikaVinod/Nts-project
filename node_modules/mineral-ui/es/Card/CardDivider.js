var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Copyright 2017 CA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React from 'react';
import { createStyledComponent } from '../styles';
import { componentTheme as cardComponentTheme } from './Card';

export var componentTheme = function componentTheme(baseTheme) {
  return _extends({
    CardDivider_borderColor: baseTheme.borderColor,
    CardDivider_borderWidth: '1px'

  }, baseTheme);
};

var Root = createStyledComponent('div', function (props) {
  var theme = _extends({}, componentTheme(props.theme), cardComponentTheme(props.theme));

  return {
    backgroundColor: theme.CardDivider_borderColor,
    height: theme.CardDivider_borderWidth,
    margin: theme.CardRow_marginVertical + ' 0'
  };
}, {
  displayName: 'CardDivider'
});

/**
 * CardDividers separate content in [Card](../card) to establish hierarchy.
 *
 * Too many dividers will add unnecessary weight to your Card.
 */
export default function CardDivider(props) {
  return React.createElement(Root, _extends({}, props, { role: 'separator' }));
}