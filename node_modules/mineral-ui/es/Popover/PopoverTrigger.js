var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 CA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React, { Children, cloneElement, Component } from 'react';
import { Target } from 'react-popper';
import { createStyledComponent } from '../styles';

var Root = createStyledComponent(Target, {
  display: 'inline-block'
}, {
  displayName: 'PopoverTrigger'
});

var PopoverTrigger = function (_Component) {
  _inherits(PopoverTrigger, _Component);

  function PopoverTrigger() {
    _classCallCheck(this, PopoverTrigger);

    return _possibleConstructorReturn(this, (PopoverTrigger.__proto__ || Object.getPrototypeOf(PopoverTrigger)).apply(this, arguments));
  }

  _createClass(PopoverTrigger, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          disabled = _props.disabled,
          isOpen = _props.isOpen,
          contentId = _props.contentId,
          restProps = _objectWithoutProperties(_props, ['children', 'disabled', 'isOpen', 'contentId']);

      var child = Children.only(children);

      var rootProps = {
        component: 'span'
      };

      var triggerProps = _extends({
        'aria-owns': contentId,
        'aria-describedby': contentId,
        'aria-disabled': disabled,
        'aria-expanded': isOpen,
        disabled: child.props.disabled !== undefined ? child.props.disabled : disabled,
        role: 'button'
      }, restProps);

      return React.createElement(
        Root,
        rootProps,
        cloneElement(child, triggerProps)
      );
    }
  }]);

  return PopoverTrigger;
}(Component);

PopoverTrigger.propTypes = {
  contentId: require('prop-types').string.isRequired,
  children: typeof React$Node === 'function' ? require('prop-types').instanceOf(React$Node).isRequired : require('prop-types').any.isRequired,
  disabled: require('prop-types').bool,
  isOpen: require('prop-types').bool.isRequired
};
export default PopoverTrigger;