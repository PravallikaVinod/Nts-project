var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Copyright 2017 CA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React from 'react';
import { Arrow } from 'react-popper';
import { createStyledComponent } from '../styles';

export var componentTheme = function componentTheme(baseTheme) {
  return _extends({
    PopoverArrow_backgroundColor: baseTheme.color_white,
    PopoverArrow_borderColor: baseTheme.color_gray_20
  }, baseTheme);
};

var Root = createStyledComponent(Arrow, function (_ref) {
  var placement = _ref.placement,
      size = _ref.size,
      baseTheme = _ref.theme;

  var theme = componentTheme(baseTheme);
  var arrowShadow = ', 0 3px 1px rgba(0, 0, 0, 0.3)';
  var horizontalOffset = '-' + (parseFloat(size) - 4) + 'px';
  var directionalStyles = void 0;
  var rotation = 0;

  switch (true) {
    case placement && placement.startsWith('top'):
      // Magic numbers to optically match theme.boxShadow_2
      arrowShadow = ', 0 4px 2px rgba(0, 0, 0, 0.3)';
      directionalStyles = {
        bottom: '-' + (parseFloat(size) - 2) + 'px',
        left: 'calc(50% - ' + size + ')',
        marginBottom: 0,
        marginTop: 0
      };
      break;
    case placement && placement.startsWith('bottom'):
      arrowShadow = '';
      directionalStyles = {
        top: '-' + (parseFloat(size) - 3) + 'px',
        left: 'calc(50% - ' + size + ')',
        marginBottom: 0,
        marginTop: 0
      };
      rotation = 180;
      break;
    case placement && placement.startsWith('left'):
      directionalStyles = {
        right: horizontalOffset,
        top: 'calc(50% - ' + size + ')',
        marginLeft: 0,
        marginRight: 0
      };
      rotation = -90;
      break;
    case placement && placement.startsWith('right'):
      directionalStyles = {
        left: horizontalOffset,
        top: 'calc(50% - ' + size + ')',
        marginLeft: 0,
        marginRight: 0
      };
      rotation = 90;
      break;
    default:
      directionalStyles = {
        display: 'none'
      };
  }

  return _extends({
    color: theme.PopoverArrow_backgroundColor,
    display: 'inline-block',
    fontSize: size,
    margin: size,
    position: 'absolute',
    textShadow: '0 2px 0 ' + theme.PopoverArrow_borderColor + arrowShadow,
    transform: 'rotate(' + rotation + 'deg) scaleX(2)'
  }, directionalStyles);
}, {
  displayName: 'PopoverArrow',
  rootEl: 'span'
});

/**
 * PopoverArrow component
 */
export default function PopoverArrow(props) {
  return React.createElement(
    Root,
    _extends({}, props, { 'aria-hidden': true }),
    '\u25BC'
  );
}
PopoverArrow.propTypes = {
  /** Size of arrow */
  size: require('prop-types').string.isRequired,

  /** Placement of the popper */
  placement: require('prop-types').oneOf(['auto', 'auto-end', 'auto-start', 'bottom', 'bottom-end', 'bottom-start', 'left', 'left-end', 'left-start', 'right', 'right-end', 'right-start', 'top', 'top-end', 'top-start'])
};