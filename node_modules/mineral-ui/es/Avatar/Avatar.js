var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Copyright 2017 CA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React, { Children, cloneElement } from 'react';
import { getColor, getReadableTextColor } from '../colors';
import { createStyledComponent, pxToEm } from '../styles';

var iconSize = {
  small: 'medium',
  medium: 'medium',
  large: pxToEm(24),
  jumbo: pxToEm(24)
};

export var componentTheme = function componentTheme(baseTheme) {
  return _extends({
    Avatar_fontSize_small: baseTheme.fontSize_mouse,
    Avatar_fontSize_medium: baseTheme.fontSize_ui,
    Avatar_fontSize_large: baseTheme.fontSize_h4,
    Avatar_fontSize_jumbo: baseTheme.fontSize_h4,
    Avatar_fontWeight: baseTheme.fontWeight_bold,
    Avatar_size_small: baseTheme.size_small,
    Avatar_size_medium: baseTheme.size_medium,
    Avatar_size_large: baseTheme.size_large,
    Avatar_size_jumbo: baseTheme.size_jumbo

  }, baseTheme);
};

var Root = createStyledComponent('span', function (_ref) {
  var background = _ref.background,
      propColor = _ref.color,
      icon = _ref.icon,
      noBackground = _ref.noBackground,
      shape = _ref.shape,
      propSize = _ref.size,
      baseTheme = _ref.theme;

  var theme = componentTheme(baseTheme);

  var color = propColor || (background ? getReadableTextColor(background, 60) : theme.color_text_onprimary);
  var size = theme['Avatar_size_' + propSize];

  return {
    alignItems: 'center',
    backgroundColor: function () {
      if (noBackground) {
        return null;
      } else if (background) {
        return getColor(background, 60) || background;
      } else {
        return theme.color_theme_60;
      }
    }(),
    color: color,
    borderRadius: shape === 'square' ? null : shape === 'rounded' ? theme.borderRadius_1 : '100%',
    display: 'inline-flex',
    fontWeight: theme.Avatar_fontWeight,
    height: size,
    lineHeight: size,
    justifyContent: 'center',
    verticalAlign: 'middle',
    width: size,

    '& > abbr,& > span': {
      fontSize: icon ? null : theme['Avatar_fontSize_' + propSize]
    },

    '& > abbr': {
      textDecoration: 'none'
    },

    '& > img': {
      borderRadius: '100%',
      display: 'block',
      width: '100%'
    },

    '& > [role="img"]': {
      fill: color
    }
  };
}, {
  displayName: 'Avatar',
  includeStyleReset: true
});

/**
 * Avatar provides a graphic representation of an identity. It can display an
 * image, text, or an [Icon](../icon).
 */
export default function Avatar(_ref2) {
  var abbr = _ref2.abbr,
      children = _ref2.children,
      _ref2$shape = _ref2.shape,
      shape = _ref2$shape === undefined ? 'circle' : _ref2$shape,
      _ref2$size = _ref2.size,
      size = _ref2$size === undefined ? 'large' : _ref2$size,
      restProps = _objectWithoutProperties(_ref2, ['abbr', 'children', 'shape', 'size']);

  var icon = void 0,
      noBackground = void 0,
      text = void 0;

  Children.map(children, function (child) {
    if (typeof child === 'string') {
      text = abbr || child.length > 1 ? _jsx('abbr', {
        title: child
      }, void 0, abbr || child.charAt(0)) : _jsx('span', {}, void 0, child);
    } else if (child.type && child.type.name && child.type.name.indexOf('Icon') != -1) {
      icon = cloneElement(child, { size: iconSize[size] });
    } else {
      noBackground = true;
    }
  });

  var rootProps = _extends({
    icon: icon,
    noBackground: noBackground,
    shape: shape,
    size: size
  }, restProps);

  return React.createElement(
    Root,
    rootProps,
    text || icon || children
  );
}